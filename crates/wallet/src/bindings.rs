// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod component {
        #[allow(dead_code)]
        pub mod wallet {
            #[allow(dead_code, clippy::all)]
            pub mod types {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, PartialEq)]
                pub enum BitcoinNetwork {
                    Bitcoin,
                    Testnet,
                    Testnet4,
                    Signet,
                    Regtest,
                }
                impl ::core::fmt::Debug for BitcoinNetwork {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            BitcoinNetwork::Bitcoin => {
                                f.debug_tuple("BitcoinNetwork::Bitcoin").finish()
                            }
                            BitcoinNetwork::Testnet => {
                                f.debug_tuple("BitcoinNetwork::Testnet").finish()
                            }
                            BitcoinNetwork::Testnet4 => {
                                f.debug_tuple("BitcoinNetwork::Testnet4").finish()
                            }
                            BitcoinNetwork::Signet => {
                                f.debug_tuple("BitcoinNetwork::Signet").finish()
                            }
                            BitcoinNetwork::Regtest => {
                                f.debug_tuple("BitcoinNetwork::Regtest").finish()
                            }
                        }
                    }
                }

                impl BitcoinNetwork {
                    #[doc(hidden)]
                    pub unsafe fn _lift(val: u8) -> BitcoinNetwork {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }

                        match val {
                            0 => BitcoinNetwork::Bitcoin,
                            1 => BitcoinNetwork::Testnet,
                            2 => BitcoinNetwork::Testnet4,
                            3 => BitcoinNetwork::Signet,
                            4 => BitcoinNetwork::Regtest,

                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }

                #[derive(Clone, Copy)]
                pub enum Error {
                    CoinSelection,
                    Psbt,
                    MissingNonWitnessUtxo,
                    NoPubkey,
                    PubkeyError,
                }
                impl ::core::fmt::Debug for Error {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            Error::CoinSelection => f.debug_tuple("Error::CoinSelection").finish(),
                            Error::Psbt => f.debug_tuple("Error::Psbt").finish(),
                            Error::MissingNonWitnessUtxo => {
                                f.debug_tuple("Error::MissingNonWitnessUtxo").finish()
                            }
                            Error::NoPubkey => f.debug_tuple("Error::NoPubkey").finish(),
                            Error::PubkeyError => f.debug_tuple("Error::PubkeyError").finish(),
                        }
                    }
                }
                impl ::core::fmt::Display for Error {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }

                impl std::error::Error for Error {}
                #[derive(Clone)]
                pub struct Config {
                    pub xpub: _rt::String,
                    pub account_derivation: _rt::String,
                    pub master_fingerprint: _rt::String,
                    pub network: BitcoinNetwork,
                }
                impl ::core::fmt::Debug for Config {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Config")
                            .field("xpub", &self.xpub)
                            .field("account-derivation", &self.account_derivation)
                            .field("master-fingerprint", &self.master_fingerprint)
                            .field("network", &self.network)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub enum Initialization {
                    OldState(_rt::Vec<u8>),
                    Config(Config),
                }
                impl ::core::fmt::Debug for Initialization {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            Initialization::OldState(e) => {
                                f.debug_tuple("Initialization::OldState").field(e).finish()
                            }
                            Initialization::Config(e) => {
                                f.debug_tuple("Initialization::Config").field(e).finish()
                            }
                        }
                    }
                }
                #[derive(Clone)]
                pub struct PartialUtxo {
                    pub txid: _rt::Vec<u8>,
                    pub vout: u32,
                    pub amount: u64,
                    pub script: _rt::Vec<u8>,
                    pub is_spent: bool,
                }
                impl ::core::fmt::Debug for PartialUtxo {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("PartialUtxo")
                            .field("txid", &self.txid)
                            .field("vout", &self.vout)
                            .field("amount", &self.amount)
                            .field("script", &self.script)
                            .field("is-spent", &self.is_spent)
                            .finish()
                    }
                }
                pub type Pubkey = _rt::Vec<u8>;

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct WatchOnly {
                    handle: _rt::Resource<WatchOnly>,
                }

                type _WatchOnlyRep<T> = Option<T>;

                impl WatchOnly {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `WatchOnly`.
                    pub fn new<T: GuestWatchOnly>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _WatchOnlyRep<T> = Some(val);
                        let ptr: *mut _WatchOnlyRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestWatchOnly>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestWatchOnly>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestWatchOnly>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestWatchOnly` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _WatchOnlyRep<T>);
                    }

                    fn as_ptr<T: GuestWatchOnly>(&self) -> *mut _WatchOnlyRep<T> {
                        WatchOnly::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`WatchOnly`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct WatchOnlyBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a WatchOnly>,
                }

                impl<'a> WatchOnlyBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestWatchOnly>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _WatchOnlyRep<T> {
                        WatchOnly::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for WatchOnly {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]component:wallet/types@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-drop]watch-only"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_watch_only_cabi<T: GuestWatchOnly>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: *mut u8,
                    arg6: usize,
                    arg7: i32,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let v4 = match arg0 {
                        0 => {
                            let e4 = {
                                let len0 = arg2;

                                _rt::Vec::from_raw_parts(arg1.cast(), len0, len0)
                            };
                            Initialization::OldState(e4)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e4 = {
                                let len1 = arg2;
                                let bytes1 = _rt::Vec::from_raw_parts(arg1.cast(), len1, len1);
                                let len2 = arg4;
                                let bytes2 = _rt::Vec::from_raw_parts(arg3.cast(), len2, len2);
                                let len3 = arg6;
                                let bytes3 = _rt::Vec::from_raw_parts(arg5.cast(), len3, len3);

                                Config {
                                    xpub: _rt::string_lift(bytes1),
                                    account_derivation: _rt::string_lift(bytes2),
                                    master_fingerprint: _rt::string_lift(bytes3),
                                    network: BitcoinNetwork::_lift(arg7 as u8),
                                }
                            };
                            Initialization::Config(e4)
                        }
                    };
                    let result5 = WatchOnly::new(T::new(v4));
                    (result5).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_watch_only_new_address_cabi<T: GuestWatchOnly>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::new_address(WatchOnlyBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let vec2 = (e.into_bytes()).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *ptr1.add(8).cast::<usize>() = len2;
                            *ptr1.add(4).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Error::CoinSelection => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                }
                                Error::Psbt => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                }
                                Error::MissingNonWitnessUtxo => {
                                    *ptr1.add(4).cast::<u8>() = (2i32) as u8;
                                }
                                Error::NoPubkey => {
                                    *ptr1.add(4).cast::<u8>() = (3i32) as u8;
                                }
                                Error::PubkeyError => {
                                    *ptr1.add(4).cast::<u8>() = (4i32) as u8;
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_watch_only_new_address<T: GuestWatchOnly>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => (),
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_watch_only_create_transaction_cabi<
                    T: GuestWatchOnly,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i64,
                    arg4: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let result1 = T::create_transaction(
                        WatchOnlyBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::Vec::from_raw_parts(arg1.cast(), len0, len0),
                        arg3 as u64,
                        arg4 as u64,
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let vec3 = (e).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2.add(8).cast::<usize>() = len3;
                            *ptr2.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Error::CoinSelection => {
                                    *ptr2.add(4).cast::<u8>() = (0i32) as u8;
                                }
                                Error::Psbt => {
                                    *ptr2.add(4).cast::<u8>() = (1i32) as u8;
                                }
                                Error::MissingNonWitnessUtxo => {
                                    *ptr2.add(4).cast::<u8>() = (2i32) as u8;
                                }
                                Error::NoPubkey => {
                                    *ptr2.add(4).cast::<u8>() = (3i32) as u8;
                                }
                                Error::PubkeyError => {
                                    *ptr2.add(4).cast::<u8>() = (4i32) as u8;
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_watch_only_create_transaction<
                    T: GuestWatchOnly,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            let base3 = l1;
                            let len3 = l2;
                            _rt::cabi_dealloc(base3, len3 * 1, 1);
                        }
                        _ => (),
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_watch_only_get_utxos_cabi<T: GuestWatchOnly>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get_utxos(WatchOnlyBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let vec5 = e;
                            let len5 = vec5.len();
                            let layout5 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec5.len() * 40, 8);
                            let result5 = if layout5.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout5);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec5.into_iter().enumerate() {
                                let base = result5.add(i * 40);
                                {
                                    let PartialUtxo {
                                        txid: txid2,
                                        vout: vout2,
                                        amount: amount2,
                                        script: script2,
                                        is_spent: is_spent2,
                                    } = e;
                                    let vec3 = (txid2).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *base.add(4).cast::<usize>() = len3;
                                    *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                                    *base.add(8).cast::<i32>() = _rt::as_i32(vout2);
                                    *base.add(16).cast::<i64>() = _rt::as_i64(amount2);
                                    let vec4 = (script2).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *base.add(28).cast::<usize>() = len4;
                                    *base.add(24).cast::<*mut u8>() = ptr4.cast_mut();
                                    *base.add(32).cast::<u8>() = (match is_spent2 {
                                        true => 1,
                                        false => 0,
                                    })
                                        as u8;
                                }
                            }
                            *ptr1.add(8).cast::<usize>() = len5;
                            *ptr1.add(4).cast::<*mut u8>() = result5;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Error::CoinSelection => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                }
                                Error::Psbt => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                }
                                Error::MissingNonWitnessUtxo => {
                                    *ptr1.add(4).cast::<u8>() = (2i32) as u8;
                                }
                                Error::NoPubkey => {
                                    *ptr1.add(4).cast::<u8>() = (3i32) as u8;
                                }
                                Error::PubkeyError => {
                                    *ptr1.add(4).cast::<u8>() = (4i32) as u8;
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_watch_only_get_utxos<T: GuestWatchOnly>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l7 = *arg0.add(4).cast::<*mut u8>();
                            let l8 = *arg0.add(8).cast::<usize>();
                            let base9 = l7;
                            let len9 = l8;
                            for i in 0..len9 {
                                let base = base9.add(i * 40);
                                {
                                    let l1 = *base.add(0).cast::<*mut u8>();
                                    let l2 = *base.add(4).cast::<usize>();
                                    let base3 = l1;
                                    let len3 = l2;
                                    _rt::cabi_dealloc(base3, len3 * 1, 1);
                                    let l4 = *base.add(24).cast::<*mut u8>();
                                    let l5 = *base.add(28).cast::<usize>();
                                    let base6 = l4;
                                    let len6 = l5;
                                    _rt::cabi_dealloc(base6, len6 * 1, 1);
                                }
                            }
                            _rt::cabi_dealloc(base9, len9 * 40, 8);
                        }
                        _ => (),
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_watch_only_insert_utxos_cabi<T: GuestWatchOnly>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let base9 = arg1;
                    let len9 = arg2;
                    let mut result9 = _rt::Vec::with_capacity(len9);
                    for i in 0..len9 {
                        let base = base9.add(i * 40);
                        let e9 = {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            let len2 = l1;
                            let l3 = *base.add(8).cast::<i32>();
                            let l4 = *base.add(16).cast::<i64>();
                            let l5 = *base.add(24).cast::<*mut u8>();
                            let l6 = *base.add(28).cast::<usize>();
                            let len7 = l6;
                            let l8 = i32::from(*base.add(32).cast::<u8>());

                            PartialUtxo {
                                txid: _rt::Vec::from_raw_parts(l0.cast(), len2, len2),
                                vout: l3 as u32,
                                amount: l4 as u64,
                                script: _rt::Vec::from_raw_parts(l5.cast(), len7, len7),
                                is_spent: _rt::bool_lift(l8 as u8),
                            }
                        };
                        result9.push(e9);
                    }
                    _rt::cabi_dealloc(base9, len9 * 40, 8);
                    let result10 =
                        T::insert_utxos(WatchOnlyBorrow::lift(arg0 as u32 as usize).get(), result9);
                    let ptr11 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result10 {
                        Ok(_) => {
                            *ptr11.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr11.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Error::CoinSelection => {
                                    *ptr11.add(1).cast::<u8>() = (0i32) as u8;
                                }
                                Error::Psbt => {
                                    *ptr11.add(1).cast::<u8>() = (1i32) as u8;
                                }
                                Error::MissingNonWitnessUtxo => {
                                    *ptr11.add(1).cast::<u8>() = (2i32) as u8;
                                }
                                Error::NoPubkey => {
                                    *ptr11.add(1).cast::<u8>() = (3i32) as u8;
                                }
                                Error::PubkeyError => {
                                    *ptr11.add(1).cast::<u8>() = (4i32) as u8;
                                }
                            }
                        }
                    };
                    ptr11
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_watch_only_get_pubkeys_cabi<T: GuestWatchOnly>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get_pubkeys(WatchOnlyBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let vec3 = e;
                            let len3 = vec3.len();
                            let layout3 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec3.len() * 8, 4);
                            let result3 = if layout3.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout3);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec3.into_iter().enumerate() {
                                let base = result3.add(i * 8);
                                {
                                    let vec2 = (e).into_boxed_slice();
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    ::core::mem::forget(vec2);
                                    *base.add(4).cast::<usize>() = len2;
                                    *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                                }
                            }
                            *ptr1.add(8).cast::<usize>() = len3;
                            *ptr1.add(4).cast::<*mut u8>() = result3;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Error::CoinSelection => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                }
                                Error::Psbt => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                }
                                Error::MissingNonWitnessUtxo => {
                                    *ptr1.add(4).cast::<u8>() = (2i32) as u8;
                                }
                                Error::NoPubkey => {
                                    *ptr1.add(4).cast::<u8>() = (3i32) as u8;
                                }
                                Error::PubkeyError => {
                                    *ptr1.add(4).cast::<u8>() = (4i32) as u8;
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_watch_only_get_pubkeys<T: GuestWatchOnly>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l4 = *arg0.add(4).cast::<*mut u8>();
                            let l5 = *arg0.add(8).cast::<usize>();
                            let base6 = l4;
                            let len6 = l5;
                            for i in 0..len6 {
                                let base = base6.add(i * 8);
                                {
                                    let l1 = *base.add(0).cast::<*mut u8>();
                                    let l2 = *base.add(4).cast::<usize>();
                                    let base3 = l1;
                                    let len3 = l2;
                                    _rt::cabi_dealloc(base3, len3 * 1, 1);
                                }
                            }
                            _rt::cabi_dealloc(base6, len6 * 8, 4);
                        }
                        _ => (),
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_watch_only_get_state_cabi<T: GuestWatchOnly>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get_state(WatchOnlyBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = (result0).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_watch_only_get_state<T: GuestWatchOnly>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    let base2 = l0;
                    let len2 = l1;
                    _rt::cabi_dealloc(base2, len2 * 1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_watch_only_balance_cabi<T: GuestWatchOnly>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::balance(WatchOnlyBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(8).cast::<i64>() = _rt::as_i64(e);
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Error::CoinSelection => {
                                    *ptr1.add(8).cast::<u8>() = (0i32) as u8;
                                }
                                Error::Psbt => {
                                    *ptr1.add(8).cast::<u8>() = (1i32) as u8;
                                }
                                Error::MissingNonWitnessUtxo => {
                                    *ptr1.add(8).cast::<u8>() = (2i32) as u8;
                                }
                                Error::NoPubkey => {
                                    *ptr1.add(8).cast::<u8>() = (3i32) as u8;
                                }
                                Error::PubkeyError => {
                                    *ptr1.add(8).cast::<u8>() = (4i32) as u8;
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_watch_only_get_receive_address_cabi<
                    T: GuestWatchOnly,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::get_receive_address(WatchOnlyBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let vec2 = (e.into_bytes()).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *ptr1.add(8).cast::<usize>() = len2;
                            *ptr1.add(4).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Error::CoinSelection => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                }
                                Error::Psbt => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                }
                                Error::MissingNonWitnessUtxo => {
                                    *ptr1.add(4).cast::<u8>() = (2i32) as u8;
                                }
                                Error::NoPubkey => {
                                    *ptr1.add(4).cast::<u8>() = (3i32) as u8;
                                }
                                Error::PubkeyError => {
                                    *ptr1.add(4).cast::<u8>() = (4i32) as u8;
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_watch_only_get_receive_address<
                    T: GuestWatchOnly,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => (),
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_watch_only_finalise_transaction_cabi<
                    T: GuestWatchOnly,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let result1 = T::finalise_transaction(
                        WatchOnlyBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::Vec::from_raw_parts(arg1.cast(), len0, len0),
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let vec3 = (e).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2.add(8).cast::<usize>() = len3;
                            *ptr2.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Error::CoinSelection => {
                                    *ptr2.add(4).cast::<u8>() = (0i32) as u8;
                                }
                                Error::Psbt => {
                                    *ptr2.add(4).cast::<u8>() = (1i32) as u8;
                                }
                                Error::MissingNonWitnessUtxo => {
                                    *ptr2.add(4).cast::<u8>() = (2i32) as u8;
                                }
                                Error::NoPubkey => {
                                    *ptr2.add(4).cast::<u8>() = (3i32) as u8;
                                }
                                Error::PubkeyError => {
                                    *ptr2.add(4).cast::<u8>() = (4i32) as u8;
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_watch_only_finalise_transaction<
                    T: GuestWatchOnly,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            let base3 = l1;
                            let len3 = l2;
                            _rt::cabi_dealloc(base3, len3 * 1, 1);
                        }
                        _ => (),
                    }
                }
                pub trait Guest {
                    type WatchOnly: GuestWatchOnly;
                }
                pub trait GuestWatchOnly: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]component:wallet/types@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-new]watch-only"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]component:wallet/types@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-rep]watch-only"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn new(init: Initialization) -> Self;
                    fn new_address(&self) -> Result<_rt::String, Error>;
                    fn create_transaction(
                        &self,
                        recepient: _rt::Vec<u8>,
                        amount: u64,
                        fee_rate: u64,
                    ) -> Result<_rt::Vec<u8>, Error>;
                    fn get_utxos(&self) -> Result<_rt::Vec<PartialUtxo>, Error>;
                    fn insert_utxos(&self, utxos: _rt::Vec<PartialUtxo>) -> Result<(), Error>;
                    fn get_pubkeys(&self) -> Result<_rt::Vec<Pubkey>, Error>;
                    fn get_state(&self) -> _rt::Vec<u8>;
                    fn balance(&self) -> Result<u64, Error>;
                    fn get_receive_address(&self) -> Result<_rt::String, Error>;
                    fn finalise_transaction(
                        &self,
                        psbt: _rt::Vec<u8>,
                    ) -> Result<_rt::Vec<u8>, Error>;
                }
                #[doc(hidden)]

                macro_rules! __export_component_wallet_types_0_1_0_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "component:wallet/types@0.1.0#[constructor]watch-only"]
    unsafe extern "C" fn export_constructor_watch_only(arg0: i32,arg1: *mut u8,arg2: usize,arg3: *mut u8,arg4: usize,arg5: *mut u8,arg6: usize,arg7: i32,) -> i32 {
      $($path_to_types)*::_export_constructor_watch_only_cabi::<<$ty as $($path_to_types)*::Guest>::WatchOnly>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    }
    #[export_name = "component:wallet/types@0.1.0#[method]watch-only.new-address"]
    unsafe extern "C" fn export_method_watch_only_new_address(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_watch_only_new_address_cabi::<<$ty as $($path_to_types)*::Guest>::WatchOnly>(arg0)
    }
    #[export_name = "cabi_post_component:wallet/types@0.1.0#[method]watch-only.new-address"]
    unsafe extern "C" fn _post_return_method_watch_only_new_address(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_watch_only_new_address::<<$ty as $($path_to_types)*::Guest>::WatchOnly>(arg0)
    }
    #[export_name = "component:wallet/types@0.1.0#[method]watch-only.create-transaction"]
    unsafe extern "C" fn export_method_watch_only_create_transaction(arg0: *mut u8,arg1: *mut u8,arg2: usize,arg3: i64,arg4: i64,) -> *mut u8 {
      $($path_to_types)*::_export_method_watch_only_create_transaction_cabi::<<$ty as $($path_to_types)*::Guest>::WatchOnly>(arg0, arg1, arg2, arg3, arg4)
    }
    #[export_name = "cabi_post_component:wallet/types@0.1.0#[method]watch-only.create-transaction"]
    unsafe extern "C" fn _post_return_method_watch_only_create_transaction(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_watch_only_create_transaction::<<$ty as $($path_to_types)*::Guest>::WatchOnly>(arg0)
    }
    #[export_name = "component:wallet/types@0.1.0#[method]watch-only.get-utxos"]
    unsafe extern "C" fn export_method_watch_only_get_utxos(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_watch_only_get_utxos_cabi::<<$ty as $($path_to_types)*::Guest>::WatchOnly>(arg0)
    }
    #[export_name = "cabi_post_component:wallet/types@0.1.0#[method]watch-only.get-utxos"]
    unsafe extern "C" fn _post_return_method_watch_only_get_utxos(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_watch_only_get_utxos::<<$ty as $($path_to_types)*::Guest>::WatchOnly>(arg0)
    }
    #[export_name = "component:wallet/types@0.1.0#[method]watch-only.insert-utxos"]
    unsafe extern "C" fn export_method_watch_only_insert_utxos(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> *mut u8 {
      $($path_to_types)*::_export_method_watch_only_insert_utxos_cabi::<<$ty as $($path_to_types)*::Guest>::WatchOnly>(arg0, arg1, arg2)
    }
    #[export_name = "component:wallet/types@0.1.0#[method]watch-only.get-pubkeys"]
    unsafe extern "C" fn export_method_watch_only_get_pubkeys(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_watch_only_get_pubkeys_cabi::<<$ty as $($path_to_types)*::Guest>::WatchOnly>(arg0)
    }
    #[export_name = "cabi_post_component:wallet/types@0.1.0#[method]watch-only.get-pubkeys"]
    unsafe extern "C" fn _post_return_method_watch_only_get_pubkeys(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_watch_only_get_pubkeys::<<$ty as $($path_to_types)*::Guest>::WatchOnly>(arg0)
    }
    #[export_name = "component:wallet/types@0.1.0#[method]watch-only.get-state"]
    unsafe extern "C" fn export_method_watch_only_get_state(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_watch_only_get_state_cabi::<<$ty as $($path_to_types)*::Guest>::WatchOnly>(arg0)
    }
    #[export_name = "cabi_post_component:wallet/types@0.1.0#[method]watch-only.get-state"]
    unsafe extern "C" fn _post_return_method_watch_only_get_state(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_watch_only_get_state::<<$ty as $($path_to_types)*::Guest>::WatchOnly>(arg0)
    }
    #[export_name = "component:wallet/types@0.1.0#[method]watch-only.balance"]
    unsafe extern "C" fn export_method_watch_only_balance(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_watch_only_balance_cabi::<<$ty as $($path_to_types)*::Guest>::WatchOnly>(arg0)
    }
    #[export_name = "component:wallet/types@0.1.0#[method]watch-only.get-receive-address"]
    unsafe extern "C" fn export_method_watch_only_get_receive_address(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_watch_only_get_receive_address_cabi::<<$ty as $($path_to_types)*::Guest>::WatchOnly>(arg0)
    }
    #[export_name = "cabi_post_component:wallet/types@0.1.0#[method]watch-only.get-receive-address"]
    unsafe extern "C" fn _post_return_method_watch_only_get_receive_address(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_watch_only_get_receive_address::<<$ty as $($path_to_types)*::Guest>::WatchOnly>(arg0)
    }
    #[export_name = "component:wallet/types@0.1.0#[method]watch-only.finalise-transaction"]
    unsafe extern "C" fn export_method_watch_only_finalise_transaction(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> *mut u8 {
      $($path_to_types)*::_export_method_watch_only_finalise_transaction_cabi::<<$ty as $($path_to_types)*::Guest>::WatchOnly>(arg0, arg1, arg2)
    }
    #[export_name = "cabi_post_component:wallet/types@0.1.0#[method]watch-only.finalise-transaction"]
    unsafe extern "C" fn _post_return_method_watch_only_finalise_transaction(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_watch_only_finalise_transaction::<<$ty as $($path_to_types)*::Guest>::WatchOnly>(arg0)
    }

    const _: () = {
      #[doc(hidden)]
      #[export_name = "component:wallet/types@0.1.0#[dtor]watch-only"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::WatchOnly::dtor::<
        <$ty as $($path_to_types)*::Guest>::WatchOnly
        >(rep)
      }
    };

  };);
}
                #[doc(hidden)]
                pub(crate) use __export_component_wallet_types_0_1_0_cabi;
                #[repr(align(8))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 16]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 16]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub use alloc_crate::alloc;
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_wallet_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::component::wallet::types::__export_component_wallet_types_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::component::wallet::types);
  )
}
#[doc(inline)]
pub(crate) use __export_wallet_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:wallet:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1113] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xdc\x07\x01A\x02\x01\
A\x02\x01B+\x01m\x05\x07bitcoin\x07testnet\x08testnet4\x06signet\x07regtest\x04\0\
\x0fbitcoin-network\x03\0\0\x01q\x05\x0ecoin-selection\0\0\x04psbt\0\0\x18missin\
g-non-witness-utxo\0\0\x09no-pubkey\0\0\x0cpubkey-error\0\0\x04\0\x05error\x03\0\
\x02\x01r\x04\x04xpubs\x12account-derivations\x12master-fingerprints\x07network\x01\
\x04\0\x06config\x03\0\x04\x01p}\x01q\x02\x09old-state\x01\x06\0\x06config\x01\x05\
\0\x04\0\x0einitialization\x03\0\x07\x01r\x05\x04txid\x06\x04vouty\x06amountw\x06\
script\x06\x08is-spent\x7f\x04\0\x0cpartial-utxo\x03\0\x09\x01p}\x04\0\x06pubkey\
\x03\0\x0b\x04\0\x0awatch-only\x03\x01\x01i\x0d\x01@\x01\x04init\x08\0\x0e\x04\0\
\x17[constructor]watch-only\x01\x0f\x01h\x0d\x01j\x01s\x01\x03\x01@\x01\x04self\x10\
\0\x11\x04\0\x1e[method]watch-only.new-address\x01\x12\x01j\x01\x06\x01\x03\x01@\
\x04\x04self\x10\x09recepient\x06\x06amountw\x08fee-ratew\0\x13\x04\0%[method]wa\
tch-only.create-transaction\x01\x14\x01p\x0a\x01j\x01\x15\x01\x03\x01@\x01\x04se\
lf\x10\0\x16\x04\0\x1c[method]watch-only.get-utxos\x01\x17\x01j\0\x01\x03\x01@\x02\
\x04self\x10\x05utxos\x15\0\x18\x04\0\x1f[method]watch-only.insert-utxos\x01\x19\
\x01p\x0c\x01j\x01\x1a\x01\x03\x01@\x01\x04self\x10\0\x1b\x04\0\x1e[method]watch\
-only.get-pubkeys\x01\x1c\x01@\x01\x04self\x10\0\x06\x04\0\x1c[method]watch-only\
.get-state\x01\x1d\x01j\x01w\x01\x03\x01@\x01\x04self\x10\0\x1e\x04\0\x1a[method\
]watch-only.balance\x01\x1f\x04\0&[method]watch-only.get-receive-address\x01\x12\
\x01@\x02\x04self\x10\x04psbt\x06\0\x13\x04\0'[method]watch-only.finalise-transa\
ction\x01\x20\x04\x01\x1ccomponent:wallet/types@0.1.0\x05\0\x04\x01\x1dcomponent\
:wallet/wallet@0.1.0\x04\0\x0b\x0c\x01\0\x06wallet\x03\0\0\0G\x09producers\x01\x0c\
processed-by\x02\x0dwit-component\x070.208.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
