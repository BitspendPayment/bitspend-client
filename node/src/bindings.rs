// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod component {
    #[allow(dead_code)]
    pub mod kv {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone, Copy)]
            pub enum Error {
                OpenFileError,
                StreamError,
                FileNotFound(u64),
                InvalidData,
                ParseError,
                EntryNotFound,
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Error::OpenFileError => f.debug_tuple("Error::OpenFileError").finish(),
                        Error::StreamError => f.debug_tuple("Error::StreamError").finish(),
                        Error::FileNotFound(e) => {
                            f.debug_tuple("Error::FileNotFound").field(e).finish()
                        }
                        Error::InvalidData => f.debug_tuple("Error::InvalidData").finish(),
                        Error::ParseError => f.debug_tuple("Error::ParseError").finish(),
                        Error::EntryNotFound => f.debug_tuple("Error::EntryNotFound").finish(),
                    }
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for Error {}

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Kvstore {
                handle: _rt::Resource<Kvstore>,
            }

            impl Kvstore {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Kvstore {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "component:kv/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]kvstore"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Kvstore {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:kv/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]kvstore"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        Kvstore::from_handle(ret as u32)
                    }
                }
            }
            impl Kvstore {
                #[allow(unused_unsafe, clippy::all)]
                pub fn insert(&self, key: &str, value: &[u8]) -> Result<(), Error> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let vec0 = key;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = value;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:kv/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]kvstore.insert"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                            ptr2,
                        );
                        let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                        match l3 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr2.add(8).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => Error::OpenFileError,
                                        1 => Error::StreamError,
                                        2 => {
                                            let e6 = {
                                                let l5 = *ptr2.add(16).cast::<i64>();

                                                l5 as u64
                                            };
                                            Error::FileNotFound(e6)
                                        }
                                        3 => Error::InvalidData,
                                        4 => Error::ParseError,
                                        n => {
                                            debug_assert_eq!(n, 5, "invalid enum discriminant");
                                            Error::EntryNotFound
                                        }
                                    };

                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Kvstore {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self, key: &str) -> Result<_rt::Vec<u8>, Error> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let vec0 = key;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:kv/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]kvstore.get"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(8).cast::<*mut u8>();
                                    let l4 = *ptr1.add(12).cast::<usize>();
                                    let len5 = l4;

                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = i32::from(*ptr1.add(8).cast::<u8>());
                                    let v8 = match l6 {
                                        0 => Error::OpenFileError,
                                        1 => Error::StreamError,
                                        2 => {
                                            let e8 = {
                                                let l7 = *ptr1.add(16).cast::<i64>();

                                                l7 as u64
                                            };
                                            Error::FileNotFound(e8)
                                        }
                                        3 => Error::InvalidData,
                                        4 => Error::ParseError,
                                        n => {
                                            debug_assert_eq!(n, 5, "invalid enum discriminant");
                                            Error::EntryNotFound
                                        }
                                    };

                                    v8
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Kvstore {
                #[allow(unused_unsafe, clippy::all)]
                pub fn delete(&self, key: &str) -> Result<(), Error> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let vec0 = key;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:kv/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]kvstore.delete"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr1.add(8).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => Error::OpenFileError,
                                        1 => Error::StreamError,
                                        2 => {
                                            let e5 = {
                                                let l4 = *ptr1.add(16).cast::<i64>();

                                                l4 as u64
                                            };
                                            Error::FileNotFound(e5)
                                        }
                                        3 => Error::InvalidData,
                                        4 => Error::ParseError,
                                        n => {
                                            debug_assert_eq!(n, 5, "invalid enum discriminant");
                                            Error::EntryNotFound
                                        }
                                    };

                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod wallet {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum BitcoinNetwork {
                Bitcoin,
                Testnet,
                Testnet4,
                Signet,
                Regtest,
            }
            impl ::core::fmt::Debug for BitcoinNetwork {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        BitcoinNetwork::Bitcoin => {
                            f.debug_tuple("BitcoinNetwork::Bitcoin").finish()
                        }
                        BitcoinNetwork::Testnet => {
                            f.debug_tuple("BitcoinNetwork::Testnet").finish()
                        }
                        BitcoinNetwork::Testnet4 => {
                            f.debug_tuple("BitcoinNetwork::Testnet4").finish()
                        }
                        BitcoinNetwork::Signet => f.debug_tuple("BitcoinNetwork::Signet").finish(),
                        BitcoinNetwork::Regtest => {
                            f.debug_tuple("BitcoinNetwork::Regtest").finish()
                        }
                    }
                }
            }

            impl BitcoinNetwork {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> BitcoinNetwork {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => BitcoinNetwork::Bitcoin,
                        1 => BitcoinNetwork::Testnet,
                        2 => BitcoinNetwork::Testnet4,
                        3 => BitcoinNetwork::Signet,
                        4 => BitcoinNetwork::Regtest,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[derive(Clone, Copy)]
            pub enum Error {
                CoinSelection,
                Psbt,
                MissingNonWitnessUtxo,
                NoPubkey,
                PubkeyError,
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Error::CoinSelection => f.debug_tuple("Error::CoinSelection").finish(),
                        Error::Psbt => f.debug_tuple("Error::Psbt").finish(),
                        Error::MissingNonWitnessUtxo => {
                            f.debug_tuple("Error::MissingNonWitnessUtxo").finish()
                        }
                        Error::NoPubkey => f.debug_tuple("Error::NoPubkey").finish(),
                        Error::PubkeyError => f.debug_tuple("Error::PubkeyError").finish(),
                    }
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for Error {}
            #[derive(Clone)]
            pub struct Config {
                pub xpub: _rt::String,
                pub account_derivation: _rt::String,
                pub master_fingerprint: _rt::String,
                pub network: BitcoinNetwork,
            }
            impl ::core::fmt::Debug for Config {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Config")
                        .field("xpub", &self.xpub)
                        .field("account-derivation", &self.account_derivation)
                        .field("master-fingerprint", &self.master_fingerprint)
                        .field("network", &self.network)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum Initialization {
                OldState(_rt::Vec<u8>),
                Config(Config),
            }
            impl ::core::fmt::Debug for Initialization {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Initialization::OldState(e) => {
                            f.debug_tuple("Initialization::OldState").field(e).finish()
                        }
                        Initialization::Config(e) => {
                            f.debug_tuple("Initialization::Config").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct PartialUtxo {
                pub txid: _rt::Vec<u8>,
                pub vout: u32,
                pub amount: u64,
                pub script: _rt::Vec<u8>,
                pub is_spent: bool,
            }
            impl ::core::fmt::Debug for PartialUtxo {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("PartialUtxo")
                        .field("txid", &self.txid)
                        .field("vout", &self.vout)
                        .field("amount", &self.amount)
                        .field("script", &self.script)
                        .field("is-spent", &self.is_spent)
                        .finish()
                }
            }
            pub type Pubkey = _rt::Vec<u8>;

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct WatchOnly {
                handle: _rt::Resource<WatchOnly>,
            }

            impl WatchOnly {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for WatchOnly {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "component:wallet/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]watch-only"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl WatchOnly {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(init: &Initialization) -> Self {
                    unsafe {
                        let (
                            result5_0,
                            result5_1,
                            result5_2,
                            result5_3,
                            result5_4,
                            result5_5,
                            result5_6,
                            result5_7,
                        ) = match init {
                            Initialization::OldState(e) => {
                                let vec0 = e;
                                let ptr0 = vec0.as_ptr().cast::<u8>();
                                let len0 = vec0.len();

                                (
                                    0i32,
                                    ptr0.cast_mut(),
                                    len0,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    0i32,
                                )
                            }
                            Initialization::Config(e) => {
                                let Config {
                                    xpub: xpub1,
                                    account_derivation: account_derivation1,
                                    master_fingerprint: master_fingerprint1,
                                    network: network1,
                                } = e;
                                let vec2 = xpub1;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();
                                let vec3 = account_derivation1;
                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                let len3 = vec3.len();
                                let vec4 = master_fingerprint1;
                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                let len4 = vec4.len();

                                (
                                    1i32,
                                    ptr2.cast_mut(),
                                    len2,
                                    ptr3.cast_mut(),
                                    len3,
                                    ptr4.cast_mut(),
                                    len4,
                                    network1.clone() as i32,
                                )
                            }
                        };

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:wallet/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]watch-only"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                            ) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            result5_0, result5_1, result5_2, result5_3, result5_4, result5_5,
                            result5_6, result5_7,
                        );
                        WatchOnly::from_handle(ret as u32)
                    }
                }
            }
            impl WatchOnly {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new_address(&self) -> Result<_rt::String, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:wallet/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]watch-only.new-address"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;
                                    let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);

                                    _rt::string_lift(bytes4)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l5 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v6 = match l5 {
                                        0 => Error::CoinSelection,
                                        1 => Error::Psbt,
                                        2 => Error::MissingNonWitnessUtxo,
                                        3 => Error::NoPubkey,
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            Error::PubkeyError
                                        }
                                    };

                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl WatchOnly {
                #[allow(unused_unsafe, clippy::all)]
                pub fn create_transaction(
                    &self,
                    recepient: &[u8],
                    amount: u64,
                    fee_rate: u64,
                ) -> Result<_rt::Vec<u8>, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let vec0 = recepient;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:wallet/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]watch-only.create-transaction"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: i64, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: i64, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            _rt::as_i64(&amount),
                            _rt::as_i64(&fee_rate),
                            ptr1,
                        );
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<*mut u8>();
                                    let l4 = *ptr1.add(8).cast::<usize>();
                                    let len5 = l4;

                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v7 = match l6 {
                                        0 => Error::CoinSelection,
                                        1 => Error::Psbt,
                                        2 => Error::MissingNonWitnessUtxo,
                                        3 => Error::NoPubkey,
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            Error::PubkeyError
                                        }
                                    };

                                    v7
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl WatchOnly {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_utxos(&self) -> Result<_rt::Vec<PartialUtxo>, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:wallet/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]watch-only.get-utxos"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base13 = l2;
                                    let len13 = l3;
                                    let mut result13 = _rt::Vec::with_capacity(len13);
                                    for i in 0..len13 {
                                        let base = base13.add(i * 40);
                                        let e13 = {
                                            let l4 = *base.add(0).cast::<*mut u8>();
                                            let l5 = *base.add(4).cast::<usize>();
                                            let len6 = l5;
                                            let l7 = *base.add(8).cast::<i32>();
                                            let l8 = *base.add(16).cast::<i64>();
                                            let l9 = *base.add(24).cast::<*mut u8>();
                                            let l10 = *base.add(28).cast::<usize>();
                                            let len11 = l10;
                                            let l12 = i32::from(*base.add(32).cast::<u8>());

                                            PartialUtxo {
                                                txid: _rt::Vec::from_raw_parts(
                                                    l4.cast(),
                                                    len6,
                                                    len6,
                                                ),
                                                vout: l7 as u32,
                                                amount: l8 as u64,
                                                script: _rt::Vec::from_raw_parts(
                                                    l9.cast(),
                                                    len11,
                                                    len11,
                                                ),
                                                is_spent: _rt::bool_lift(l12 as u8),
                                            }
                                        };
                                        result13.push(e13);
                                    }
                                    _rt::cabi_dealloc(base13, len13 * 40, 8);

                                    result13
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l14 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v15 = match l14 {
                                        0 => Error::CoinSelection,
                                        1 => Error::Psbt,
                                        2 => Error::MissingNonWitnessUtxo,
                                        3 => Error::NoPubkey,
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            Error::PubkeyError
                                        }
                                    };

                                    v15
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl WatchOnly {
                #[allow(unused_unsafe, clippy::all)]
                pub fn insert_utxos(&self, utxos: &[PartialUtxo]) -> Result<(), Error> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                        let vec3 = utxos;
                        let len3 = vec3.len();
                        let layout3 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec3.len() * 40, 8);
                        let result3 = if layout3.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout3);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec3.into_iter().enumerate() {
                            let base = result3.add(i * 40);
                            {
                                let PartialUtxo {
                                    txid: txid0,
                                    vout: vout0,
                                    amount: amount0,
                                    script: script0,
                                    is_spent: is_spent0,
                                } = e;
                                let vec1 = txid0;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                *base.add(4).cast::<usize>() = len1;
                                *base.add(0).cast::<*mut u8>() = ptr1.cast_mut();
                                *base.add(8).cast::<i32>() = _rt::as_i32(vout0);
                                *base.add(16).cast::<i64>() = _rt::as_i64(amount0);
                                let vec2 = script0;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();
                                *base.add(28).cast::<usize>() = len2;
                                *base.add(24).cast::<*mut u8>() = ptr2.cast_mut();
                                *base.add(32).cast::<u8>() = (match is_spent0 {
                                    true => 1,
                                    false => 0,
                                })
                                    as u8;
                            }
                        }
                        let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:wallet/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]watch-only.insert-utxos"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result3, len3, ptr4);
                        let l5 = i32::from(*ptr4.add(0).cast::<u8>());
                        if layout3.size() != 0 {
                            _rt::alloc::dealloc(result3.cast(), layout3);
                        }
                        match l5 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = i32::from(*ptr4.add(1).cast::<u8>());
                                    let v7 = match l6 {
                                        0 => Error::CoinSelection,
                                        1 => Error::Psbt,
                                        2 => Error::MissingNonWitnessUtxo,
                                        3 => Error::NoPubkey,
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            Error::PubkeyError
                                        }
                                    };

                                    v7
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl WatchOnly {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_pubkeys(&self) -> Result<_rt::Vec<Pubkey>, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:wallet/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]watch-only.get-pubkeys"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base7 = l2;
                                    let len7 = l3;
                                    let mut result7 = _rt::Vec::with_capacity(len7);
                                    for i in 0..len7 {
                                        let base = base7.add(i * 8);
                                        let e7 = {
                                            let l4 = *base.add(0).cast::<*mut u8>();
                                            let l5 = *base.add(4).cast::<usize>();
                                            let len6 = l5;

                                            _rt::Vec::from_raw_parts(l4.cast(), len6, len6)
                                        };
                                        result7.push(e7);
                                    }
                                    _rt::cabi_dealloc(base7, len7 * 8, 4);

                                    result7
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l8 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v9 = match l8 {
                                        0 => Error::CoinSelection,
                                        1 => Error::Psbt,
                                        2 => Error::MissingNonWitnessUtxo,
                                        3 => Error::NoPubkey,
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            Error::PubkeyError
                                        }
                                    };

                                    v9
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl WatchOnly {
                #[allow(unused_unsafe, clippy::all)]
                pub fn balance(&self) -> Result<u64, Error> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:wallet/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]watch-only.balance"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<i64>();

                                    l2 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v4 = match l3 {
                                        0 => Error::CoinSelection,
                                        1 => Error::Psbt,
                                        2 => Error::MissingNonWitnessUtxo,
                                        3 => Error::NoPubkey,
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            Error::PubkeyError
                                        }
                                    };

                                    v4
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl WatchOnly {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_receive_address(&self) -> Result<_rt::String, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:wallet/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]watch-only.get-receive-address"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;
                                    let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);

                                    _rt::string_lift(bytes4)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l5 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v6 = match l5 {
                                        0 => Error::CoinSelection,
                                        1 => Error::Psbt,
                                        2 => Error::MissingNonWitnessUtxo,
                                        3 => Error::NoPubkey,
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            Error::PubkeyError
                                        }
                                    };

                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod component {
        #[allow(dead_code)]
        pub mod node {
            #[allow(dead_code, clippy::all)]
            pub mod types {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct Ipv4SocketAdress {
                    pub address: (u8, u8, u8, u8),
                    pub port: u16,
                }
                impl ::core::fmt::Debug for Ipv4SocketAdress {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Ipv4SocketAdress")
                            .field("address", &self.address)
                            .field("port", &self.port)
                            .finish()
                    }
                }
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, PartialEq)]
                pub enum BitcoinNetwork {
                    Bitcoin,
                    Testnet,
                    Testnet4,
                    Signet,
                    Regtest,
                }
                impl ::core::fmt::Debug for BitcoinNetwork {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            BitcoinNetwork::Bitcoin => {
                                f.debug_tuple("BitcoinNetwork::Bitcoin").finish()
                            }
                            BitcoinNetwork::Testnet => {
                                f.debug_tuple("BitcoinNetwork::Testnet").finish()
                            }
                            BitcoinNetwork::Testnet4 => {
                                f.debug_tuple("BitcoinNetwork::Testnet4").finish()
                            }
                            BitcoinNetwork::Signet => {
                                f.debug_tuple("BitcoinNetwork::Signet").finish()
                            }
                            BitcoinNetwork::Regtest => {
                                f.debug_tuple("BitcoinNetwork::Regtest").finish()
                            }
                        }
                    }
                }

                impl BitcoinNetwork {
                    #[doc(hidden)]
                    pub unsafe fn _lift(val: u8) -> BitcoinNetwork {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }

                        match val {
                            0 => BitcoinNetwork::Bitcoin,
                            1 => BitcoinNetwork::Testnet,
                            2 => BitcoinNetwork::Testnet4,
                            3 => BitcoinNetwork::Signet,
                            4 => BitcoinNetwork::Regtest,

                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }

                #[derive(Clone)]
                pub struct NodeConfig {
                    pub genesis_blockhash: _rt::String,
                    pub network: BitcoinNetwork,
                    pub socket_address: Ipv4SocketAdress,
                    pub xpub: _rt::String,
                }
                impl ::core::fmt::Debug for NodeConfig {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("NodeConfig")
                            .field("genesis-blockhash", &self.genesis_blockhash)
                            .field("network", &self.network)
                            .field("socket-address", &self.socket_address)
                            .field("xpub", &self.xpub)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub enum Initialization {
                    OldState,
                    Config(NodeConfig),
                }
                impl ::core::fmt::Debug for Initialization {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            Initialization::OldState => {
                                f.debug_tuple("Initialization::OldState").finish()
                            }
                            Initialization::Config(e) => {
                                f.debug_tuple("Initialization::Config").field(e).finish()
                            }
                        }
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ClientNode {
                    handle: _rt::Resource<ClientNode>,
                }

                type _ClientNodeRep<T> = Option<T>;

                impl ClientNode {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `ClientNode`.
                    pub fn new<T: GuestClientNode>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _ClientNodeRep<T> = Some(val);
                        let ptr: *mut _ClientNodeRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestClientNode>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestClientNode>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestClientNode>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestClientNode` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _ClientNodeRep<T>);
                    }

                    fn as_ptr<T: GuestClientNode>(&self) -> *mut _ClientNodeRep<T> {
                        ClientNode::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`ClientNode`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ClientNodeBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a ClientNode>,
                }

                impl<'a> ClientNodeBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestClientNode>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _ClientNodeRep<T> {
                        ClientNode::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for ClientNode {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]component:node/types@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-drop]client-node"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_client_node_cabi<T: GuestClientNode>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i32,
                    arg4: i32,
                    arg5: i32,
                    arg6: i32,
                    arg7: i32,
                    arg8: i32,
                    arg9: *mut u8,
                    arg10: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let v2 = match arg0 {
                        0 => Initialization::OldState,
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e2 = {
                                let len0 = arg2;
                                let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                                let len1 = arg10;
                                let bytes1 = _rt::Vec::from_raw_parts(arg9.cast(), len1, len1);

                                NodeConfig {
                                    genesis_blockhash: _rt::string_lift(bytes0),
                                    network: BitcoinNetwork::_lift(arg3 as u8),
                                    socket_address: Ipv4SocketAdress {
                                        address: (arg4 as u8, arg5 as u8, arg6 as u8, arg7 as u8),
                                        port: arg8 as u16,
                                    },
                                    xpub: _rt::string_lift(bytes1),
                                }
                            };
                            Initialization::Config(e2)
                        }
                    };
                    let result3 = ClientNode::new(T::new(v2));
                    (result3).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_client_node_get_balance_cabi<T: GuestClientNode>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::get_balance(ClientNodeBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(8).cast::<i64>() = _rt::as_i64(e);
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(8).cast::<i32>() = _rt::as_i32(e);
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_client_node_get_receive_address_cabi<
                    T: GuestClientNode,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::get_receive_address(ClientNodeBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let vec2 = (e.into_bytes()).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *ptr1.add(8).cast::<usize>() = len2;
                            *ptr1.add(4).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(4).cast::<i32>() = _rt::as_i32(e);
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_client_node_get_receive_address<
                    T: GuestClientNode,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => (),
                    }
                }
                pub trait Guest {
                    type ClientNode: GuestClientNode;
                }
                pub trait GuestClientNode: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]component:node/types@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-new]client-node"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]component:node/types@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-rep]client-node"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn new(init: Initialization) -> Self;
                    fn get_balance(&self) -> Result<u64, u32>;
                    fn get_receive_address(&self) -> Result<_rt::String, u32>;
                }
                #[doc(hidden)]

                macro_rules! __export_component_node_types_0_1_0_cabi{
    ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

      #[export_name = "component:node/types@0.1.0#[constructor]client-node"]
      unsafe extern "C" fn export_constructor_client_node(arg0: i32,arg1: *mut u8,arg2: usize,arg3: i32,arg4: i32,arg5: i32,arg6: i32,arg7: i32,arg8: i32,arg9: *mut u8,arg10: usize,) -> i32 {
        $($path_to_types)*::_export_constructor_client_node_cabi::<<$ty as $($path_to_types)*::Guest>::ClientNode>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
      }
      #[export_name = "component:node/types@0.1.0#[method]client-node.get-balance"]
      unsafe extern "C" fn export_method_client_node_get_balance(arg0: *mut u8,) -> *mut u8 {
        $($path_to_types)*::_export_method_client_node_get_balance_cabi::<<$ty as $($path_to_types)*::Guest>::ClientNode>(arg0)
      }
      #[export_name = "component:node/types@0.1.0#[method]client-node.get-receive-address"]
      unsafe extern "C" fn export_method_client_node_get_receive_address(arg0: *mut u8,) -> *mut u8 {
        $($path_to_types)*::_export_method_client_node_get_receive_address_cabi::<<$ty as $($path_to_types)*::Guest>::ClientNode>(arg0)
      }
      #[export_name = "cabi_post_component:node/types@0.1.0#[method]client-node.get-receive-address"]
      unsafe extern "C" fn _post_return_method_client_node_get_receive_address(arg0: *mut u8,) {
        $($path_to_types)*::__post_return_method_client_node_get_receive_address::<<$ty as $($path_to_types)*::Guest>::ClientNode>(arg0)
      }

      const _: () = {
        #[doc(hidden)]
        #[export_name = "component:node/types@0.1.0#[dtor]client-node"]
        #[allow(non_snake_case)]
        unsafe extern "C" fn dtor(rep: *mut u8) {
          $($path_to_types)*::ClientNode::dtor::<
          <$ty as $($path_to_types)*::Guest>::ClientNode
          >(rep)
        }
      };

    };);
  }
                #[doc(hidden)]
                pub(crate) use __export_component_node_types_0_1_0_cabi;
                #[repr(align(8))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 16]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 16]);
            }
        }
    }
}
mod _rt {

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub use alloc_crate::alloc;
    pub use alloc_crate::boxed::Box;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_nodeworld_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::component::node::types::__export_component_node_types_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::component::node::types);
  )
}
#[doc(inline)]
pub(crate) use __export_nodeworld_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:nodeworld:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 2107] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xbb\x0f\x01A\x02\x01\
A\x06\x01B\x10\x01q\x06\x0fopen-file-error\0\0\x0cstream-error\0\0\x0efile-not-f\
ound\x01w\0\x0cinvalid-data\0\0\x0bparse-error\0\0\x0fentry-not-found\0\0\x04\0\x05\
error\x03\0\0\x04\0\x07kvstore\x03\x01\x01i\x02\x01@\0\0\x03\x04\0\x14[construct\
or]kvstore\x01\x04\x01h\x02\x01p}\x01j\0\x01\x01\x01@\x03\x04self\x05\x03keys\x05\
value\x06\0\x07\x04\0\x16[method]kvstore.insert\x01\x08\x01j\x01\x06\x01\x01\x01\
@\x02\x04self\x05\x03keys\0\x09\x04\0\x13[method]kvstore.get\x01\x0a\x01@\x02\x04\
self\x05\x03keys\0\x07\x04\0\x16[method]kvstore.delete\x01\x0b\x03\x01\x18compon\
ent:kv/types@0.1.0\x05\0\x01B'\x01m\x05\x07bitcoin\x07testnet\x08testnet4\x06sig\
net\x07regtest\x04\0\x0fbitcoin-network\x03\0\0\x01q\x05\x0ecoin-selection\0\0\x04\
psbt\0\0\x18missing-non-witness-utxo\0\0\x09no-pubkey\0\0\x0cpubkey-error\0\0\x04\
\0\x05error\x03\0\x02\x01r\x04\x04xpubs\x12account-derivations\x12master-fingerp\
rints\x07network\x01\x04\0\x06config\x03\0\x04\x01p}\x01q\x02\x09old-state\x01\x06\
\0\x06config\x01\x05\0\x04\0\x0einitialization\x03\0\x07\x01r\x05\x04txid\x06\x04\
vouty\x06amountw\x06script\x06\x08is-spent\x7f\x04\0\x0cpartial-utxo\x03\0\x09\x01\
p}\x04\0\x06pubkey\x03\0\x0b\x04\0\x0awatch-only\x03\x01\x01i\x0d\x01@\x01\x04in\
it\x08\0\x0e\x04\0\x17[constructor]watch-only\x01\x0f\x01h\x0d\x01j\x01s\x01\x03\
\x01@\x01\x04self\x10\0\x11\x04\0\x1e[method]watch-only.new-address\x01\x12\x01j\
\x01\x06\x01\x03\x01@\x04\x04self\x10\x09recepient\x06\x06amountw\x08fee-ratew\0\
\x13\x04\0%[method]watch-only.create-transaction\x01\x14\x01p\x0a\x01j\x01\x15\x01\
\x03\x01@\x01\x04self\x10\0\x16\x04\0\x1c[method]watch-only.get-utxos\x01\x17\x01\
j\0\x01\x03\x01@\x02\x04self\x10\x05utxos\x15\0\x18\x04\0\x1f[method]watch-only.\
insert-utxos\x01\x19\x01p\x0c\x01j\x01\x1a\x01\x03\x01@\x01\x04self\x10\0\x1b\x04\
\0\x1e[method]watch-only.get-pubkeys\x01\x1c\x01j\x01w\x01\x03\x01@\x01\x04self\x10\
\0\x1d\x04\0\x1a[method]watch-only.balance\x01\x1e\x04\0&[method]watch-only.get-\
receive-address\x01\x12\x03\x01\x1ccomponent:wallet/types@0.1.0\x05\x01\x01B\x1b\
\x01r\x02\x03keys\x05values\x04\0\x0ekey-value-pair\x03\0\0\x01q\x0a\x0dkey-not-\
found\0\0\x12key-already-exists\0\0\x10unexpected-error\0\0\x12key-overflow-erro\
r\0\0\x14value-overflow-error\0\0\x14try-from-slice-error\0\0\x0autf8-error\0\0\x10\
filesystem-error\x01}\0\x13invalid-magic-bytes\0\0\x0cstream-error\0\0\x04\0\x0b\
store-error\x03\0\x02\x01o\x04}}}}\x01r\x02\x07address\x04\x04port{\x04\0\x12ipv\
4-socket-adress\x03\0\x05\x01m\x05\x07bitcoin\x07testnet\x08testnet4\x06signet\x07\
regtest\x04\0\x0fbitcoin-network\x03\0\x07\x01ks\x01r\x04\x03fee\x09\x19estimate\
d-settlement-timew\x02ids\x04rates\x04\0\x10offering-bargain\x03\0\x0a\x01r\x04\x11\
genesis-blockhashs\x07network\x08\x0esocket-address\x06\x04xpubs\x04\0\x0bnode-c\
onfig\x03\0\x0c\x01q\x02\x09old-state\0\0\x06config\x01\x0d\0\x04\0\x0einitializ\
ation\x03\0\x0e\x04\0\x0bclient-node\x03\x01\x01i\x10\x01@\x01\x04init\x0f\0\x11\
\x04\0\x18[constructor]client-node\x01\x12\x01h\x10\x01j\x01w\x01y\x01@\x01\x04s\
elf\x13\0\x14\x04\0\x1f[method]client-node.get-balance\x01\x15\x01j\x01s\x01y\x01\
@\x01\x04self\x13\0\x16\x04\0'[method]client-node.get-receive-address\x01\x17\x04\
\x01\x1acomponent:node/types@0.1.0\x05\x02\x04\x01\x1ecomponent:node/nodeworld@0\
.1.0\x04\0\x0b\x0f\x01\0\x09nodeworld\x03\0\0\0G\x09producers\x01\x0cprocessed-b\
y\x02\x0dwit-component\x070.208.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
