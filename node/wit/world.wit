package component:node@0.1.0;

/// An example world for the component to target.
world nodeworld {
    import component:kv/types@0.1.0;
    import component:wallet/types@0.1.0;
    export types;
}


interface types { 
  

    record key-value-pair {
        key: string,
        value: string,
    }

    variant store-error{
        key-not-found,
        key-already-exists,
        unexpected-error,
        key-overflow-error,
        value-overflow-error,
        try-from-slice-error,
        utf8-error,
        filesystem-error(u8),
        invalid-magic-bytes,
        stream-error
    }

    record ipv4-socket-adress {
        address: tuple<u8, u8, u8, u8>, 
        port: u16
    }

    enum bitcoin-network {
        bitcoin,
        testnet,
        testnet4,
        signet,
        regtest,
    }

    variant initialization {
        old-state,
        config(node-config)
    }

    record offering-bargain {
        fee: option<string>,
        estimated-settlement-time: u64,
        id: string,
        rate: string,
    }

    record node-config {
        genesis-blockhash: string,
        network: bitcoin-network,
        socket-address: ipv4-socket-adress,
        xpub: string
    }


    resource client-node {

        constructor(init: initialization);

        get-balance: func() -> result<u64, u32>;

        get-receive-address: func() -> result<string, u32>;

     

    }
}